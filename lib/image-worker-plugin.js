/**
 * Copyright 2020 Google Inc. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *     http://www.apache.org/licenses/LICENSE-2.0
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import { promisify } from 'util';
import * as path from 'path';
import { promises as fsp } from 'fs';

import glob from 'glob';

const globP = promisify(glob);

export default function () {
  return {
    name: 'image-worker-plugin',
    async buildStart() {
      const base = path.join(process.cwd(), 'src', 'image-worker');
      const dirs = (
        await globP('*/', {
          cwd: base,
        })
      ).map((dir) => dir.slice(0, -1));

      const file = [
        `// This file is autogenerated by lib/image-worker-plugin.js`,
        `import { expose } from 'comlink';`,
        `import { timed } from './util';`,
        dirs.map((dir) => `import ${dir} from './${dir}';`),
        `const exports = {`,
        dirs.map((dir) => [
          `  ${dir}(`,
          `    ...args: Parameters<typeof ${dir}>`,
          `  ): ReturnType<typeof ${dir}> {`,
          `    return timed('${dir}', () => ${dir}(...args));`,
          `  },`,
        ]),
        `};`,
        `export type ProcessorWorkerApi = typeof exports;`,
        `expose(exports, self);`,
      ]
        .flat(Infinity)
        .join('\n');

      await fsp.writeFile(path.join(base, 'index.ts'), file);
    },
  };
}
